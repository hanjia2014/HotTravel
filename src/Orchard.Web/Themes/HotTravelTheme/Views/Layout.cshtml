@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta(httpEquiv: "X-UA-Compatible", content: "IE=edge,chrome=1");
    Style.Include("//fonts.googleapis.com/css?family=Lobster&subset=latin");
    Style.Include("bootstrap.min.css");
    Style.Include("font-awesome.min.css");
    Style.Include("imports.css");
    Style.Include("owl-carousel.css");
    Style.Include("navigation.css");
    Style.Include("default-grid.css");

    Script.Include("jquery1.11.2.min.js");
    Script.Include("bootstrap.min.js");
    Script.Include("custom.js");
    Script.Include("owl.carousel.min.js");
    Script.Include("navigation.js");
    /* Some useful shortcuts or settings
    ***************************************************************/

    Func <dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "5"); // Site name and link to the home page
    WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
    WorkContext.Layout.Footer.Add(New.User(), "10"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}
@tag.StartElement
@if (Model.Header != null)
{
    @*<header id="layout-header" class="group">
            <div id="header">
                @Zone(Model.Header)
            </div>
        </header>*@

    <div class="navbar-wrapper">
        <header class="navbar navbar-default navbar-fixed-top" id="MainMenu">
            <div class="navbar-extra-top clearfix">
                <div class="navbar container-fluid">
                    <ul class="nav navbar-nav navbar-left">
                        <li class="menu-item"><a href="contact.html"><i class="fa fa-envelope"></i> Contact Us</a></li>
                        @*<li class="menu-item"><a href="#"><i class="fa fa-suitcase"></i> Join the Explorers!</a></li>
                        <li class="menu-item"><a href="/admin"><i class="fa fa-sign-in"></i> Sign in</a></li>*@
                    </ul>
                    <div class="navbar-top-right">
                        @*<ul class="nav navbar-nav navbar-right">
                            <li><a href="#"><i class="fa fa-facebook fa-fw"></i></a></li>
                            <li><a href="#"><i class="fa fa-google-plus fa-fw"></i></a></li>
                            <li><a href="#"><i class="fa fa-twitter fa-fw"></i></a></li>
                            <li><a href="#"><i class="fa fa-instagram fa-fw"></i></a></li>
                        </ul>*@
                        <form class="navbar-form navbar-right navbar-search" role="search" action="search.html">
                            <div class="form-group">
                                <input type="text" class="form-control" placeholder="Search">
                            </div>
                            <button type="submit" class="btn btn-default"><span class="fa fa-search"></span></button>
                        </form>
                    </div>
                </div>
            </div>

            <div class="container-fluid collapse-md" id="navbar-main-container">
                <div class="navbar-header">
                    <a href="/" class="navbar-brand"><img alt="GoExplore!" src="@Url.Content("~/Themes/HotTravelTheme/Content/Images/logo.jpg")"><span class="sr-only">&nbsp; GoExplore!</span></a>
                    <button class="navbar-toggle" type="button" data-toggle="collapse" data-target="#navbar-main">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                </div>

                @if (Model.Navigation != null)
                {
                    @Zone(Model.Navigation)
                }

            </div><!-- /.container-fluid -->
        </header>
    </div>

}

@if (Model.Featured != null)
{
    <div id="layout-featured" class="group">
        @Zone(Model.Featured)
    </div>
}
@if (Model.BeforeMain != null)
{
    <div id="layout-before-main" class="group">
        @Zone(Model.BeforeMain)
    </div>
}
<div id="layout-main-container">
    <div id="layout-main" class="group">
        @if (Model.AsideFirst != null)
        {
            <aside id="aside-first" class="aside-first group">
                @Zone(Model.AsideFirst)
            </aside>
        }
        <div id="layout-content" class="group">
            @if (Model.Messages != null)
            {
                <div id="messages">
                    @Zone(Model.Messages)
                </div>
            }
            @if (Model.BeforeContent != null)
            {
                <div id="before-content">
                    @Zone(Model.BeforeContent)
                </div>
            }
            @* the model content for the page is in the Content zone @ the default position (nothing, zero, zilch) *@
            @if (Model.Content != null)
            {
                <div id="content" class="group">
                    @Zone(Model.Content)
                </div>
            }
            @if (Model.AfterContent != null)
            {
                <div id="after-content">
                    @Zone(Model.AfterContent)
                </div>
            }
        </div>
        @if (Model.AsideSecond != null)
        {
            <aside id="aside-second" class="aside-second">
                @Zone(Model.AsideSecond)
            </aside>
        }
    </div>
</div>
@if (Model.AfterMain != null)
{
    <div id="layout-after-main" class="group">
        @Zone(Model.AfterMain)
    </div>
}
@if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
{
    <div id="layout-tripel-container">
        <div id="layout-tripel" class="group">
            @* as in beer *@
            @if (Model.TripelFirst != null)
            {
                <div id="tripel-first">
                    @Zone(Model.TripelFirst)
                </div>
            }
            @if (Model.TripelSecond != null)
            {
                <div id="tripel-second">
                    @Zone(Model.TripelSecond)
                </div>
            }
            @if (Model.TripelThird != null)
            {
                <div id="tripel-third">
                    @Zone(Model.TripelThird)
                </div>
            }
        </div>
    </div>
}
<div id="layout-footer" class="group">
    <footer id="footer">
        <div id="footer-quad" class="group">
            @if (Model.FooterQuadFirst != null)
            {
                <div id="footer-quad-first">
                    @Zone(Model.FooterQuadFirst)
                </div>
            }
            @if (Model.FooterQuadSecond != null)
            {
                <div id="footer-quad-second">
                    @Zone(Model.FooterQuadSecond)
                </div>
            }
            @if (Model.FooterQuadThird != null)
            {
                <div id="footer-quad-third">
                    @Zone(Model.FooterQuadThird)
                </div>
            }
            @if (Model.FooterQuadFourth != null)
            {
                <div id="footer-quad-fourth">
                    @Zone(Model.FooterQuadFourth)
                </div>
            }
        </div>
        @if (Model.Footer != null)
        {
            <div id="footer-sig" class="group">
                @Zone(Model.Footer)
            </div>
        }
    </footer>
</div>
@tag.EndElement